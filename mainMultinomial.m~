close all
clear
clc

addpath('MultinomialFunctions/')
addpath('Datasets/')

%Variables initialization
window = 100;
numberOfStates = 2;
h = 21.0694;
% hotellingTot = zeros(1000,100);
% maxTot = zeros(1000,1);
% percentili = [99 99.5 99.8 99.9 99.95];
% resPercentili = zeros(1,length(percentili));
% for prova=1:3
%     test = 0;
%     for run=1:1000
[finalDataset] = discreteDataset();
limit = floor(length(finalDataset)/window);
% observationVector = zeros(numberOfStates,limit);
% estimateVector = zeros(numberOfStates,limit);
estimateVector = [];
c = 1;

%Calculate the observation matrix Nij(number of occurence of each state) for non-overlapping slots of '#window' data
% for i=1:window:(limit*window)
%     for z=i:window+i-1
%         observationVector(finalDataset(z),c) = observationVector(finalDataset(z),c) + 1;
%     end
%     c = c + 1;
% end
for i=window+1:window:(limit*window)
    vett = finalDataset(i - window:i-1);
    A = hist(vett,1:numberOfStates);
    estimateVector = [estimateVector; A/window];
end
% estimateVector(:,:) = observationVector(:,:)/window;

for t=1:length(estimateVector)
    hotellingT(1,t) = ShiftDifference(t, estimateVector);
    maxT = max(hotellingT);
    idx = find(hotellingT==(max(hotellingT)));
    
    if maxT >= h  %esecuzione normale (:,1:t)
        tChange = idx;
    end
end

%     hotellingTot(run,:) = hotellingT(:,:);
%     maxTot(run,1) = maxT;
%controllo superamento soglia fissa
%         if maxT >= h
%             test = test +1;
%         end
%     end
%     mediaT(1,prova) = test;
% end
% meanHotelling = mean(hotellingTot);
% meanMaxT = mean(maxTot);
% for q=1:length(percentili)
%     resPercentili(1,q)= prctile(maxTot,percentili(q));
% end

figure(1)
plot(hotellingT,'*')
line([0 100],[h h],'LineWidth',2,'Color', 'b')